generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER) // If the user is an USER, MOD or ADMIN

    Nade Nade[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Map {
    id         String @id @default(cuid())
    mapName    String @unique
    NadesInMap Nade[]
}

model Nade {
    id          String  @id @default(cuid()) // Nade Id
    nadeType    String
    thrownFrom  String // Location from where it's thrown (eg. T Spawn)
    endLocation String // Location where it lands (eg. Mid Window)
    map         Map     @relation(fields: [mapId], references: [id]) // In which map is
    mapId       String // Map id
    user        User    @relation(fields: [userId], references: [id]) // Which user uploaded it
    userId      String // User id
    votes       Int     @default(0) // Current votes
    tickrate    String // If its 64 or 128 tickrate
    ttOrCt      String // If its for CTs or TTs
    gfycatUrl   String  @unique // Gfycat url
    description String? // If there's a description
    movement    String // Parado, Caminando, Corriendo, Agachado, Agachado movi√©ndose
    technique   String // Clic izquierdo, Click derecho, Izquierdo + Derecho, Jumpthrow, Jumpthrow + W, Jumpthrow + Izq y Der

    approved  Boolean  @default(false) // If the nade was approved by the ADMIN
    position  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    USER
    MOD
    ADMIN
}
